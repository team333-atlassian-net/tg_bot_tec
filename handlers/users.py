import io
import pandas as pd
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dao.auth import add_user, add_user_with_excel, get_user, is_admin
from aiogram.filters import Command
from models import User
from utils import generate_unique_pin

router = Router()

class AddUserStates(StatesGroup):
    """–ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)"""
    choosing_method = State()
    first_name = State()
    last_name = State()
    middle_name = State()
    pin_code = State()


@router.message(Command("add_user"))
async def start_add_user(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ—Ü –≤ —Å–∏—Å—Ç–µ–º—É"""
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await message.answer("–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?\n\n–í–≤–µ–¥–∏—Ç–µ <b>–≤—Ä—É—á–Ω—É—é</b> –∏–ª–∏ <b>excel</b>")
    await state.set_state(AddUserStates.choosing_method)

########################################################
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É  –≤—Ä—É—á–Ω—É—é
@router.message(AddUserStates.choosing_method, F.text.lower() == "–≤—Ä—É—á–Ω—É—é")
async def manual_entry_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è:")
    await state.set_state(AddUserStates.first_name)

@router.message(AddUserStates.first_name)
async def get_first_name(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(AddUserStates.last_name)

@router.message(AddUserStates.last_name)
async def get_last_name(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ:")
    await state.set_state(AddUserStates.middle_name)

@router.message(AddUserStates.middle_name)
async def get_middle_name(message: Message, state: FSMContext):
    await state.update_data(middle_name=message.text.strip())
    
    data = await state.get_data()
    pin_code = await generate_unique_pin()

    user = User(
        first_name=data["first_name"],
        last_name=data["last_name"],
        middle_name=data["middle_name"],
        pin_code=pin_code,
        tg_id=None
    )
    await add_user(user)

    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω.\nüìå PIN-–∫–æ–¥: <b>{pin_code}</b>", parse_mode="HTML")
    await state.clear()

#####################################################################
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ excel
@router.message(AddUserStates.choosing_method, F.text.lower() == "excel")
async def excel_entry_start(message: Message):
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ Excel-—Ñ–∞–π–ª (.xlsx) —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: first_name, last_name, middle_name")

@router.message(F.document)
async def handle_excel(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    file = message.document
    if not file.file_name.endswith(".xlsx"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .xlsx")
        return

    file_bytes = await message.bot.download(file)
    df = pd.read_excel(io.BytesIO(file_bytes.read()))

    required_columns = {"first_name", "last_name", "middle_name"}
    if not required_columns.issubset(df.columns):
        await message.answer("‚ùå –í Excel-—Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏: first_name, last_name, middle_name")
        return

    added = await add_user_with_excel(df)

    await message.answer(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {added} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Excel.")