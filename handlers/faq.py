import io
import pandas as pd
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from dao.faq import add_faq, add_faq_with_excel, find_categories, search_faqs, search_faqs_by_category
from models import FAQ
from utils.auth import require_admin, require_auth

router = Router()

class AddFAQStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞ –≤ –ë–î"""
    choose_mode = State()
    question = State()
    answer = State()
    category = State()
    waiting_for_file = State()

########################################################################
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑—É
@router.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å faq")
async def start_add_faq(message: Message, state: FSMContext):
    await require_admin(message)

    await message.answer(
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å FAQ?\n\n"
        "–í–≤–µ–¥–∏—Ç–µ <b>–≤—Ä—É—á–Ω—É—é</b> –∏–ª–∏ <b>excel</b>.",
        parse_mode="HTML"
    )
    await state.set_state(AddFAQStates.choose_mode)

@router.message(AddFAQStates.choose_mode)
async def handle_faq_mode_choice(message: Message, state: FSMContext):
    text = message.text.lower()

    if text == "–≤—Ä—É—á–Ω—É—é":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:")
        await state.set_state(AddFAQStates.question)

    elif text == "excel":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ (–∫–æ–ª–æ–Ω–∫–∏: question, answer, category).")
        await state.set_state(AddFAQStates.waiting_for_file)

    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ <b>–≤—Ä—É—á–Ω—É—é</b> –∏–ª–∏ <b>excel</b>.", parse_mode="HTML")

############################################################################
@router.message(AddFAQStates.question)
async def faq_question_input(message: Message, state: FSMContext):
    await require_admin(message)
    await state.update_data(question=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:")
    await state.set_state(AddFAQStates.answer)

@router.message(AddFAQStates.answer)
async def faq_answer_input(message: Message, state: FSMContext):
    await require_admin(message)
    await state.update_data(answer=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–∏–ª–∏ '-' –µ—Å–ª–∏ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏):")
    await state.set_state(AddFAQStates.category)

@router.message(AddFAQStates.category)
async def faq_category_input(message: Message, state: FSMContext):
    await require_admin(message)
    data = await state.get_data()
    category = message.text.strip()
    if category == "-":
        category = None

    faq = FAQ(
        question=data["question"],
        answer=data["answer"],
        category=category
    )

    await add_faq(faq)

    await message.answer("‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.")
    await state.clear()
    
@router.message(AddFAQStates.waiting_for_file, F.document)
async def handle_excel_file(message: Message, state: FSMContext):
    await require_admin(message)
    file = message.document
    if not file.file_name.endswith(".xlsx"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .xlsx")
        return

    file_bytes = await message.bot.download(file)
    df = pd.read_excel(io.BytesIO(file_bytes.read()))

    required_columns = {"question", "answer", "category"}
    if not required_columns.issubset(df.columns):
        await message.answer("‚ùå –í Excel-—Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏: question, answer, category")
        return

    added = await add_faq_with_excel(df)

    await message.answer(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {added} –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ Excel.")
##########################################################################
# –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.message(F.text.startswith("faq"))
async def handle_faq_search(message: Message):
    await require_auth(message)
    query_text = message.text.strip()[3:].strip()  # –£–¥–∞–ª—è–µ–º "faq" –∏ –ø—Ä–æ–±–µ–ª

    if not query_text:
        await message.answer("‚ùì –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ `faq`. –ü—Ä–∏–º–µ—Ä: `faq –∫–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ`")
        return

    results = await search_faqs(query_text)

    if not results:
        await message.answer("üòî –ù–µ –Ω–∞—à–ª–æ—Å—å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    for faq in results[:5]:
        text = f"‚ùì <b>{faq.question}</b>\n\nüí¨ {faq.answer}"
        await message.answer(text, parse_mode="HTML")

#############################################################
# –ü—Ä–æ—Å–º–æ—Ç—Ä–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –≤–æ–ø—Ä–æ—Å–æ–≤/–æ—Ç–≤–µ—Ç–æ–≤ –≤ –Ω–µ–π
@router.message(F.text == "/faq")
async def show_faq_categories(message: Message):
    await require_auth(message)
    categories_raw = await find_categories()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º: None ‚Üí "–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    categories = [cat if cat is not None else "–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" for cat in categories_raw]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat, callback_data=f"faq_category:{cat}")]
        for cat in categories
    ])

    text = (
        "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é FAQ:</b>\n\n"
        "üîé –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>faq –∫–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç–ø—É—Å–∫</code>"
    )

    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")



@router.callback_query(F.data.startswith("faq_category:"))
async def handle_faq_category(callback: CallbackQuery):
    category = callback.data.split("faq_category:")[1]

    faqs = await search_faqs_by_category(category)

    if not faqs:
        await callback.message.answer(f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    await callback.message.answer(f"üìñ –í–æ–ø—Ä–æ—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <b>{category}</b>", parse_mode="HTML")

    for faq in faqs:
        text = f"‚ùì <b>{faq.question}</b>\n\nüí¨ {faq.answer}"
        await callback.message.answer(text, parse_mode="HTML")

    await callback.answer()
