from aiogram import Router, F
from aiogram.types import Message, InputFile
from dao.auth import get_user
from dao.canteen import get_latest_canteen_info

router = Router()

@router.message(F.text.lower() == "—Å—Ç–æ–ª–æ–≤–∞—è")
async def canteen_info_handler(message: Message):
    tg_id = message.from_user.id
    user = await get_user(tg_id=tg_id)

    if not user:
        await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –ø–∏–Ω-–∫–æ–¥ —Å –ø–æ–º–æ—â—å—é /login.")
        return
    
    canteen_info = await get_latest_canteen_info()

    if not canteen_info:
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–ª–æ–≤–æ–π –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        return

    text = (
        f"üïí *–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:*\n{canteen_info.work_schedule}\n\n"
        f"üìã *–ú–µ–Ω—é:*\n{canteen_info.menu_text}"
    )

    await message.answer(text, parse_mode="Markdown")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if canteen_info.file_path:
        try:
            await message.answer_document(InputFile(canteen_info.file_path))
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –º–µ–Ω—é: {e}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if canteen_info.image_path:
        try:
            await message.answer_photo(InputFile(canteen_info.image_path))
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
