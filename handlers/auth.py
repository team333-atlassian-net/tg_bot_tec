"""–•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É—Ç–µ–Ω—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Bot, Router, F
from dao.auth import add_user, create_registration_request, get_request, get_user, get_users, update_or_add_tg_id, update_request_status
from aiogram.filters import Command
from models import User
from utils import generate_pin


router = Router()

class AuthStates(StatesGroup):
    """–ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ü–ò–ù-–∫–æ–¥—É"""
    awaiting_pin = State()

class RegisterRequestStates(StatesGroup):
    """–ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    first_name = State()
    last_name = State()
    middle_name = State()

#######################################################################
# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command("login"))
async def start_handler(message: Message, state: FSMContext):
    """–°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ü–ò–ù-–∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
    await state.set_state(AuthStates.awaiting_pin)


@router.message(AuthStates.awaiting_pin)
async def handle_pin(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –ø–∏–Ω –∫–æ–¥–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–∞–∫–æ–π —é–∑–µ—Ä –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ"""
    pin = message.text.strip()
    tg_id = message.from_user.id

    user = await get_user(pin_code=pin)

    if not user:
        await message.answer("–ü–ò–ù-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞—Ç—å login")
        await state.clear()
        return

    if user.tg_id and user.tg_id != tg_id:
        await message.answer("–≠—Ç–æ—Ç –ü–ò–ù-–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞—Ç—å login")
        await state.clear()
        return

    await update_or_add_tg_id(user, tg_id)

    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!")
    await state.clear()

##########################################################
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@router.message(Command("register"))
async def register_start(message: Message, state: FSMContext):
    await state.set_state(RegisterRequestStates.first_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

@router.message(RegisterRequestStates.first_name)
async def enter_first_name(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text.strip())
    await state.set_state(RegisterRequestStates.last_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")

@router.message(RegisterRequestStates.last_name)
async def enter_last_name(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text.strip())
    await state.set_state(RegisterRequestStates.middle_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ:")


@router.message(RegisterRequestStates.middle_name)
async def reg_middle_name(message: Message, state: FSMContext):
    data = await state.get_data()
    first_name = data["first_name"]
    last_name = data["last_name"]
    middle_name = message.text.strip()
    tg_id = str(message.from_user.id)

    request = await create_registration_request(tg_id, first_name, last_name, middle_name)
    request_id = request.id

    await message.answer("–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await state.clear()

    admins = await get_users(admin_rule=True)
    for admin in admins:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve:{request_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{request_id}")]
        ])
        await message.bot.send_message(
            chat_id=admin.tg_id,
            text=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n<b>{last_name} {first_name} {middle_name}</b>",
            reply_markup=kb
        )


@router.callback_query(F.data.startswith("approve:"))
async def approve_request(callback: CallbackQuery):
    request_id = callback.data.split(":")[1]
    request = await get_request(id=request_id)
    pin = generate_pin()

    await update_request_status(request_id=request_id, status="approved")
    user = User(
        tg_id=int(request.tg_id),
        first_name=request.first_name,
        last_name=request.last_name,
        middle_name=request.middle_name,
        pin_code=pin,
        admin_rule=False
    )
    await add_user(user)

    await callback.message.bot.send_message(chat_id=int(request.tg_id), text=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –í–∞—à –ü–ò–ù: <b>{pin}</b>")
    await callback.message.answer(
        text=f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{request.last_name} {request.first_name}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n"
             f"–ï–º—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ü–ò–ù-–∫–æ–¥: <b>{pin}</b>"
    )

    await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω.")

@router.callback_query(F.data.startswith("reject:"))
async def reject_request(callback: CallbackQuery):
    request_id = callback.data.split(":")[1]
    request = await get_request(id=request_id)
    await update_request_status(request_id=request_id, status="rejected")
    await callback.message.bot.send_message(chat_id=int(request.tg_id), text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    await callback.message.answer(
        text=f"–ó–∞—è–≤–∫–∞ –æ—Ç <b>{request.last_name} {request.first_name}</b> –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
    )

    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")