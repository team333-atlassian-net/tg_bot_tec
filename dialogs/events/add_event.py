import logging

from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery

from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.text import Const, Format
from aiogram_dialog.widgets.input import TextInput, MessageInput
from aiogram_dialog.widgets.kbd import Back, Cancel, Row, Button

from dao.auth import get_all_active_users
from dao.events import create_event

logger = logging.getLogger(__name__)

class EventCreationSG(StatesGroup):
    title = State()
    description = State()
    confirm = State()

async def on_title_input(
    message: Message,
    widget: TextInput,
    dialog: DialogManager,
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ dialog_data –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è.
    """
    dialog.dialog_data["title"] = message.text
    await dialog.switch_to(EventCreationSG.description)


async def on_description_input(
    message: Message, widget: TextInput, dialog: DialogManager
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è.
    """
    dialog.dialog_data["description"] = message.text
    await dialog.switch_to(EventCreationSG.confirm)


async def on_confirm_press(callback: CallbackQuery, widget, dialog_manager: DialogManager, **kwargs):
    title = dialog_manager.dialog_data.get("title")
    description = dialog_manager.dialog_data.get("description")

    if not title or not description:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑—É
    await create_event(title, description)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await get_all_active_users()
    text = f"üéâ <b>–ù–æ–≤–æ–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ</b>\n\n<b>{title}</b>\n{description}"

    for user in users:
        try:
            await callback.bot.send_message(chat_id=user.tg_id, text=text)
        except Exception:
            pass

    await callback.message.answer("‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º.")
    logger.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ (/add_event)")
    await dialog_manager.done()


async def send_file_callback(c, button, manager: DialogManager):
    telegram_file_id = button.widget_id.split("_", 1)[-1]
    await c.message.answer_document(telegram_file_id)

# --- –û–∫–Ω–∞ ---

title_window = Window(
    Const("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:"),
    MessageInput(on_title_input),
    Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∞")),
    state=EventCreationSG.title,
)

description_window = Window(
    Const("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:"),
    MessageInput(on_description_input),
    Row(
        Back(Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")),
        Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∞")),
    ),
    state=EventCreationSG.description,
)

confirm_window = Window(
    Format(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {dialog_data[title]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {dialog_data[description]}"
    ),
    Row(
        Button(Const("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"), id="confirm", on_click=on_confirm_press),
        Back(Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")),
        Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∞")),
    ),
    state=EventCreationSG.confirm,
)

create_event_dialog = Dialog(
    title_window, description_window, confirm_window
)