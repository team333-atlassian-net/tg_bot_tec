import logging
from aiogram_dialog import Window, Dialog
from aiogram_dialog.widgets.text import Const
from aiogram_dialog.widgets.input import TextInput, MessageInput
from aiogram_dialog.api.protocols import DialogManager
from aiogram.types import Message
from aiogram_dialog.widgets.input import MessageInput
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Document
from aiogram_dialog.widgets.kbd import Back, Next, Cancel, Row, Button, Select
from aiogram_dialog.widgets.text import Const, Format
from aiogram.enums import ContentType, ParseMode
from dao.virtual_excursions import (
    get_all_excursions,
    get_excursion_by_id,
    add_material,
    create_excursion,
)

logger = logging.getLogger(__name__)
# TODO –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã getters handlers


class ExcursionCreationSG(StatesGroup):
    title = State()
    description = State()
    confirm = State()
    upload_materials = State()


class ExcursionView(StatesGroup):
    list = State()
    detail = State()


async def get_excursion_list(dialog_manager: DialogManager, **kwargs):
    excursions = await get_all_excursions()
    return {"excursions": [(str(e.id), e.title) for e in excursions]}


async def get_excursion_detail(dialog_manager: DialogManager, **kwargs):
    excursion_id = int(dialog_manager.dialog_data["selected_excursion_id"])
    excursion = await get_excursion_by_id(excursion_id)
    materials = excursion.materials

    return {
        "excursion": excursion,
        "materials": materials,
    }


async def on_title_input(
    message: Message,
    widget: TextInput,
    dialog: DialogManager,
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞.

    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ dialog_data –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è.
    """
    dialog.dialog_data["title"] = message.text
    await dialog.switch_to(ExcursionCreationSG.description)


async def on_description_input(
    message: Message, widget: TextInput, dialog: DialogManager
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è.

    """
    dialog.dialog_data["description"] = message.text
    await dialog.switch_to(ExcursionCreationSG.confirm)


async def on_description_skip(callback, button: Button, dialog: DialogManager):
    dialog.dialog_data["description"] = "‚Äî"
    await dialog.switch_to(ExcursionCreationSG.confirm)


async def on_document_upload(
    message: Message, widget: MessageInput, dialog: DialogManager
):
    if not (message.document and message.text):
        return

    doc = message.document
    text = message.text
    excursion_id = dialog.dialog_data.get("excursion_id")
    file_id = doc.file_id if doc else None
    file_name = doc.file_name if doc else None
    add_material(excursion_id, file_id, file_name, text)

    await message.answer(f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª ¬´{doc.file_name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω.")


async def on_confirm_press(callback, button, manager: DialogManager):
    title = manager.dialog_data.get("title")
    description = manager.dialog_data.get("description")

    excursion = await create_excursion(title, description)

    manager.dialog_data["excursion_id"] = excursion.id
    await manager.switch_to(ExcursionCreationSG.upload_materials)


async def on_excursion_selected(
    callback, widget: Select, manager: DialogManager, selected_id: str
):
    manager.dialog_data["selected_excursion_id"] = int(selected_id)
    await manager.switch_to(ExcursionView.detail)


async def send_file_callback(c, button, manager: DialogManager):
    telegram_file_id = button.widget_id.split("_", 1)[-1]
    await c.message.answer_document(telegram_file_id)


def material_button(material):
    return Button(
        Const(material.file_name or "üìÑ –ú–∞—Ç–µ—Ä–∏–∞–ª"),
        id=f"file_{material.telegram_file_id}",
        on_click=send_file_callback,
    )


async def detail_window_getter(dialog_manager: DialogManager, **kwargs):
    data = await get_excursion_detail(dialog_manager)
    data["material_buttons"] = [material_button(m) for m in data["materials"]]
    return data


# async def get_material_buttons(dialog_manager: DialogManager, **kwargs):
#     materials = await get_excursion_detail(dialog_manager)
#     return [Button(text=m.title) for m in materials]

# --- –û–∫–Ω–∞ ---

title_window = Window(
    Const("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏:"),
    MessageInput(on_title_input),
    Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∞")),
    state=ExcursionCreationSG.title,
)

description_window = Window(
    Const("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):"),
    MessageInput(on_description_input),
    Row(
        Button(
            Const("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"),
            id="skip_description",
            on_click=on_description_skip,
        ),
        Back(Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")),
    ),
    state=ExcursionCreationSG.description,
)

confirm_window = Window(
    Format(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {dialog_data[title]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {dialog_data[description]}"
    ),
    Row(
        Button(Const("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"), id="confirm", on_click=on_confirm_press),
        Back(Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")),
        Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∞")),
    ),
    state=ExcursionCreationSG.confirm,
)

upload_materials_window = Window(
    Const(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (PDF, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏ —Ç.–¥.):\n\n–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤."
    ),
    MessageInput(
        on_document_upload, content_types=[ContentType.DOCUMENT, ContentType.TEXT]
    ),
    Row(
        Button(
            Const("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å"), id="finish_upload", on_click=lambda c, b, m: m.done()
        ),
        Back(Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")),
        Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∞")),
    ),
    state=ExcursionCreationSG.upload_materials,
)

excursion_list_window = Window(
    Const("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —ç–∫—Å–∫—É—Ä—Å–∏—é:"),
    Select(
        Format("{item[1]}"),
        id="excursion_select",
        item_id_getter=lambda x: x[0],
        items="excursions",
        on_click=on_excursion_selected,
    ),
    Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∞")),
    state=ExcursionView.list,
    getter=get_excursion_list,
)

excursion_detail_window = Window(
    Format("üìå <b>{excursion.title}</b>\n\n{excursion.description}"),
    Row(Back(Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")), Cancel(Const("‚ùå –ó–∞–∫—Ä—ã—Ç—å"))),
    state=ExcursionView.detail,
    getter=detail_window_getter,
)

create_virtual_excursion_dialog = Dialog(
    title_window, description_window, confirm_window, upload_materials_window
)

virtual_excursion_dialog = Dialog(excursion_list_window, excursion_detail_window)
